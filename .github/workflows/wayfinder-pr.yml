{% raw %}
name: Wayfinder validate manifests for deployment

on:
  pull_request:
    branches:
    - main

permissions:
  id-token: write
  contents: read
  attestations: write
  pull-requests: write
  packages: write

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  yaml-lint:
    name: "YAML Lint"
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.lint.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install yamllint
        run: sudo apt-get install yamllint
      - name: Run yamllint
        id: lint
        run: yamllint ./wayfinder
  wf-dry-run-client:
    name: "Wayfinder Dry Run (Client)"
    runs-on: ubuntu-latest
    container: quay.io/${{ vars.WAYFINDER_QUAY_ORG }}/wftoolbox:${{ vars.WAYFINDER_VERSION }}
    outputs:
      result: ${{ steps.client.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Wayfinder dry-run (client)
        id: client
        run: wf -w ${{ vars.WAYFINDER_WORKSPACE }} apply -f ./wayfinder --owner ${{ vars.WAYFINDER_RESOURCE_OWNER }} --dry-run client
  wf-dry-run-server:
    name: "Wayfinder Dry Run (Server)"
    runs-on: ubuntu-latest
    container: quay.io/${{ vars.WAYFINDER_QUAY_ORG }}/wftoolbox:${{ vars.WAYFINDER_VERSION }}
    outputs:
      result: ${{ steps.server.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Wayfinder dry-run (server)
        id: server
        env:
          WAYFINDER_SERVER: ${{ vars.WAYFINDER_SERVER }}
          WAYFINDER_TOKEN: ${{ secrets.WAYFINDER_TOKEN }}
        run: wf -w ${{ vars.WAYFINDER_WORKSPACE }} apply -f ./wayfinder --owner ${{ vars.WAYFINDER_RESOURCE_OWNER }} --dry-run server
  wf-diff:
    name: "Wayfinder Diff"
    runs-on: ubuntu-latest
    container: quay.io/${{ vars.WAYFINDER_QUAY_ORG }}/wftoolbox:${{ vars.WAYFINDER_VERSION }}
    outputs:
      result: ${{ steps.diff.outcome }}
      stdout: ${{ steps.diff.outputs.stdout }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Wayfinder diff
        id: diff
        shell: bash
        env:
          WAYFINDER_SERVER: ${{ vars.WAYFINDER_SERVER }}
          WAYFINDER_TOKEN: ${{ secrets.WAYFINDER_TOKEN }}
        run: |
          set +e
          wf -w ${{ vars.WAYFINDER_WORKSPACE }} diff -f ./wayfinder --owner ${{ vars.WAYFINDER_RESOURCE_OWNER }} --prune --prune-scope all 2>&1 | tee stdout.txt
          diffExitCode=$?
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "stdout<<$EOF" >> "$GITHUB_OUTPUT"
          cat stdout.txt >> "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"
          exit $diffExitCode
  update-pr:
    name: "Update PR"
    if: success() || failure()
    runs-on: ubuntu-latest
    needs:
      - yaml-lint
      - wf-dry-run-client
      - wf-dry-run-server
      - wf-diff
    steps:
      - name: Add PR Comment
        uses: actions/github-script@v6
        env:
          WF_DIFF: "${{ needs.wf-diff.outputs.stdout }}"
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Pull Request Review Status')
            })

            // 2. Check output length
            const wfDiff = process.env.WF_DIFF || '';
            var diff = wfDiff.trim();
            const excludedStrings = ["Processing file ", "No diffs for "];
            const filteredLines = diff.split('\n').filter(line =>
              !excludedStrings.some(excludedStr => line.includes(excludedStr))
            );
            var diffOutput = filteredLines.join('\n').trim();
            if (diffOutput.length < 1 || diffOutput.length > 65000) {
              diffOutput = "Wayfinder diff output is too large, please view the workflow run logs directly."
            }

            // 3. Prepare format of the comment
            const output = `### Pull Request Review Status
            * 🔍 <b>YAML Lint:</b>                  \`${{ needs.yaml-lint.outputs.result }}\`
            * 🤖 <b>Wayfinder Dry Run (Client):</b> \`${{ needs.wf-dry-run-client.outputs.result }}\`
            * 🤖 <b>Wayfinder Dry Run (Server):</b> \`${{ needs.wf-dry-run-server.outputs.result }}\`
            * 📖 <b>Wayfinder Diff:</b>             \`${{ needs.wf-diff.outputs.result }}\`

            <details><summary><b>Output: 📖 Wayfinder Diff</b></summary>

            \`\`\`
            ${diffOutput}
            \`\`\`
            </details>

            *<b>Pusher:</b> @${{ github.actor }}, <b>Action:</b> \`${{ github.event_name }}\`*
            *<b>Workflow Run Link:</b> ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}*`;

            // 4. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  publish-image:
    name: "Publish Image"
    if: success()
    runs-on: ubuntu-latest
    needs:
      - yaml-lint
      - wf-dry-run-client
      - wf-dry-run-server
      - wf-diff
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr,suffix=-{{sha}}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image.
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  generate-preview:
    name: "Generate Preview"
    if: success()
    runs-on: ubuntu-latest
    needs:
      - publish-image
    container: quay.io/${{ vars.WAYFINDER_QUAY_ORG }}/wftoolbox:${{ vars.WAYFINDER_VERSION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Deploy to a preview environment
        id: deploy
        env:
          WAYFINDER_SERVER: ${{ vars.WAYFINDER_SERVER }}
          WAYFINDER_WORKSPACE: ${{ vars.WAYFINDER_WORKSPACE }}
          WAYFINDER_TOKEN: ${{ secrets.WAYFINDER_TOKEN_NONPROD }}
          APP_IMAGE_TAG: ${{ needs.publish-image.outputs.tags }}
        run: |
          export PREVIEW_ENV="pr-${{ github.event.pull_request.number }}"
          wf apply -f ./wayfinder --owner ${{ vars.WAYFINDER_RESOURCE_OWNER }} --prune --prune-scope all --wait-for-ready 5m --confirm
{% endraw %}
          wf create appenv --app ${{ values.name }} --env ${PREVIEW_ENV} --cluster ${{ values.nonProdCluster }} --stage nonprod || true
          wf deploy app ${{ values.name }} ${PREVIEW_ENV} --component-container-image app=app=${APP_IMAGE_TAG}
          sleep 30
          echo "PR_PREVIEW_URL=$(wf get appenv ${{ values.name }}-${PREVIEW_ENV} -o json | jq -r '.status.deployment.components[0].endpoint')" >> $GITHUB_OUTPUT
{% raw %}

      - name: Add PR Comment
        uses: actions/github-script@v6
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Deploy Preview')
            })

            // 2. Get current time
            const currentDateTime = new Date();

            // 3. Prepare format of the comment
            const output = `### Deploy Preview
            * 📖 <b>PR Preview Link:</b> https://${{ steps.deploy.outputs.PR_PREVIEW_URL }}

            This preview will be automatically deleted when the PR is closed.

            *<b>Generation Time:</b> ${currentDateTime}*
            *<b>Workflow Run Link:</b> ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}*`;

            // 4. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
{% endraw %}
